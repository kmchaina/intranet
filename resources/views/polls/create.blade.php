@extends('layouts.dashboard') @section('title', 'Create New Poll') @section('page-title', 'Create New Poll') @section('content') <div class="max-w-4xl mx-auto"> <!-- Enhanced Header with Progress --> <div class="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl shadow-lg mb-8 overflow-hidden"> <div class="px-8 py-6 text-white"> <div class="flex items-center justify-between"> <div> <h1 class="text-3xl font-bold mb-2">Create a New Poll</h1> <p class="text-blue-100">Follow the simple steps below to create an engaging poll for your team</p> </div> <a href="{{ route('polls.index') }}" class="inline-flex items-center px-4 py-2 bg-white/20 hover:bg-white/30 text-white text-sm font-medium rounded-lg transition-colors"> <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path> </svg> Back to Polls </a> </div> </div> </div> @if ($errors->any()) <div class="bg-red-50 border-l-4 border-red-400 p-6 mb-8 rounded-lg"> <div class="flex"> <div class="flex-shrink-0"> <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path> </svg> </div> <div class="ml-3"> <h3 class="text-sm font-medium text-red-800">Please fix the following issues:</h3> <div class="mt-2 text-sm text-red-700"> <ul class="list-disc list-inside space-y-1"> @foreach ($errors->all() as $error) <li>{{ $error }}</li> @endforeach </ul> </div> </div> </div> </div> @endif <form method="POST" action="{{ route('polls.store') }}" id="pollForm" class="space-y-8"> @csrf <!-- Hidden status field - default to active --> <input type="hidden" name="status" value="active"> <!-- Step 1: Basic Information --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">1</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Basic Information</h3> <p class="text-sm text-gray-600">Tell us about your poll - what's it about and why?</p> </div> </div> </div> <div class="p-6 space-y-6"> <div> <label for="title" class="block text-sm font-medium text-gray-700 mb-2"> Poll Question or Title <span class="text-red-500">*</span> </label> <input type="text" name="title" id="title" value="{{ old('title') }}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" placeholder="What would you like to ask? (e.g., 'Which meeting time works best for you?')" required> <p class="mt-1 text-sm text-gray-500">Make it clear and specific so people understand what you're asking</p> @error('title') <p class="text-red-500 text-sm mt-1">{{ $message }}</p> @enderror </div> <div> <label for="description" class="block text-sm font-medium text-gray-700 mb-2"> Additional Details <span class="text-gray-400">(Optional)</span> </label> <textarea name="description" id="description" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" placeholder="Add any extra context, background information, or instructions that might help people answer your poll...">{{ old('description') }}</textarea> <p class="mt-1 text-sm text-gray-500">This helps provide context and increases participation</p> @error('description') <p class="text-red-500 text-sm mt-1">{{ $message }}</p> @enderror </div> </div> </div> <!-- Step 2: Poll Type Selection --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">2</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Choose Poll Type</h3> <p class="text-sm text-gray-600">Select the type that best fits what you want to learn</p> </div> </div> </div> <div class="p-6"> <div class="grid grid-cols-1 md:grid-cols-2 gap-4"> <!-- Single Choice --> <label class="poll-type-card cursor-pointer {{ old('type') === 'single_choice' ? 'selected' : '' }}"> <input type="radio" name="type" value="single_choice" class="sr-only" {{ old('type') === 'single_choice' ? 'checked' : '' }} onchange="updatePollOptions()"> <div class="p-6 border-2 border-gray-200 rounded-xl hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3"> <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> </div> <h4 class="font-semibold text-gray-900 mb-2">Single Choice</h4> <p class="text-sm text-gray-600">People can pick only one option</p> <p class="text-xs text-gray-500 mt-1">Best for: "What's your preferred option?"</p> </div> </div> </label> <!-- Multiple Choice --> <label class="poll-type-card cursor-pointer {{ old('type') === 'multiple_choice' ? 'selected' : '' }}"> <input type="radio" name="type" value="multiple_choice" class="sr-only" {{ old('type') === 'multiple_choice' ? 'checked' : '' }} onchange="updatePollOptions()"> <div class="p-6 border-2 border-gray-200 rounded-xl hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3"> <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> </div> <h4 class="font-semibold text-gray-900 mb-2">Multiple Choice</h4> <p class="text-sm text-gray-600">People can select multiple options</p> <p class="text-xs text-gray-500 mt-1">Best for: "Which apply to you?"</p> </div> </div> </label> <!-- Rating --> <label class="poll-type-card cursor-pointer {{ old('type') === 'rating' ? 'selected' : '' }}"> <input type="radio" name="type" value="rating" class="sr-only" {{ old('type') === 'rating' ? 'checked' : '' }} onchange="updatePollOptions()"> <div class="p-6 border-2 border-gray-200 rounded-xl hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-3"> <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path> </svg> </div> <h4 class="font-semibold text-gray-900 mb-2">Rating Scale</h4> <p class="text-sm text-gray-600">People rate on a scale (1-5 or 1-10)</p> <p class="text-xs text-gray-500 mt-1">Best for: "How satisfied are you?"</p> </div> </div> </label> <!-- Yes/No --> <label class="poll-type-card cursor-pointer {{ old('type') === 'yes_no' ? 'selected' : '' }}"> <input type="radio" name="type" value="yes_no" class="sr-only" {{ old('type') === 'yes_no' ? 'checked' : '' }} onchange="updatePollOptions()"> <div class="p-6 border-2 border-gray-200 rounded-xl hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3"> <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> </div> <h4 class="font-semibold text-gray-900 mb-2">Yes/No Question</h4> <p class="text-sm text-gray-600">Simple binary choice</p> <p class="text-xs text-gray-500 mt-1">Best for: "Do you agree?"</p> </div> </div> </label> </div> @error('type') <p class="text-red-500 text-sm mt-2">{{ $message }}</p> @enderror </div> </div> <!-- Step 3: Poll Options --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden" id="optionsSection"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">3</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Set Up Your Options</h3> <p class="text-sm text-gray-600">Add the choices or configure the rating scale</p> </div> </div> </div> <div class="p-6"> <!-- Choice Options (Single/Multiple Choice) --> <div id="choiceOptions" style="{{ old('type') && in_array(old('type'), ['single_choice', 'multiple_choice']) ? 'display: block;' : 'display: none;' }}"> <div class="mb-4"> <h4 class="font-medium text-gray-900 mb-2">Poll Options <span class="text-red-500">*</span></h4> <p class="text-sm text-gray-600">Add at least 2 options for people to choose from. You can add more by clicking "Add Option".</p> </div> <div id="optionsList" class="space-y-3"> <div class="option-input bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3"> <span class="text-sm font-medium text-blue-600">1</span> </div> <input type="text" name="options[]" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="First option (e.g., 'Monday morning')" value="{{ old('options.0') }}" required> <button type="button" onclick="removeOption(this)" class="ml-3 p-2 text-red-500 hover:bg-red-50 rounded-lg transition-colors"> <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path> </svg> </button> </div> </div> <div class="option-input bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3"> <span class="text-sm font-medium text-blue-600">2</span> </div> <input type="text" name="options[]" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Second option (e.g., 'Tuesday afternoon')" value="{{ old('options.1') }}" required> <button type="button" onclick="removeOption(this)" class="ml-3 p-2 text-red-500 hover:bg-red-50 rounded-lg transition-colors"> <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path> </svg> </button> </div> </div> </div> <button type="button" onclick="addOption()" class="mt-4 inline-flex items-center px-4 py-2 bg-green-50 hover:bg-green-100 text-green-700 text-sm font-medium rounded-lg border border-green-200 transition-colors"> <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path> </svg> Add Another Option </button> @error('options') <p class="text-red-500 text-sm mt-2">{{ $message }}</p> @enderror </div> <!-- Rating Options --> <div id="ratingOptions" style="{{ old('type') === 'rating' ? 'display: block;' : 'display: none;' }}"> <div class="mb-4"> <h4 class="font-medium text-gray-900 mb-2">Rating Scale <span class="text-red-500">*</span></h4> <p class="text-sm text-gray-600">Choose how many points your rating scale should have.</p> </div> <div class="grid grid-cols-1 md:grid-cols-2 gap-4"> <label class="rating-scale-card cursor-pointer {{ old('max_rating', '5') == '5' ? 'selected' : '' }}"> <input type="radio" name="max_rating" value="5" class="sr-only" {{ old('max_rating', '5') == '5' ? 'checked' : '' }} checked> <div class="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="flex justify-center space-x-1 mb-2"> @for($i = 1; $i <= 5; $i++) <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"> <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path> </svg> @endfor </div> <h5 class="font-medium text-gray-900">1 to 5 Scale</h5> <p class="text-sm text-gray-600">Classic rating scale</p> </div> </div> </label> <label class="rating-scale-card cursor-pointer {{ old('max_rating') == '10' ? 'selected' : '' }}"> <input type="radio" name="max_rating" value="10" class="sr-only" {{ old('max_rating') == '10' ? 'checked' : '' }}> <div class="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-300 transition-colors"> <div class="text-center"> <div class="flex justify-center space-x-1 mb-2"> <div class="text-2xl font-bold text-blue-600">1-10</div> </div> <h5 class="font-medium text-gray-900">1 to 10 Scale</h5> <p class="text-sm text-gray-600">More detailed rating</p> </div> </div> </label> </div> @error('max_rating') <p class="text-red-500 text-sm mt-2">{{ $message }}</p> @enderror </div> <!-- Yes/No Options Display --> <div id="yesNoOptions" style="{{ old('type') === 'yes_no' ? 'display: block;' : 'display: none;' }}"> <div class="mb-4"> <h4 class="font-medium text-gray-900 mb-2">Your Yes/No Options</h4> <p class="text-sm text-gray-600">Here are the options people will see when they vote:</p> </div> <div class="space-y-3"> <!-- Yes Option Preview --> <div class="flex items-center p-4 bg-green-50 border-2 border-green-200 rounded-lg"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center"> <span class="text-sm font-semibold text-green-600">1</span> </div> </div> <div class="ml-4 flex-1"> <div class="flex items-center"> <span class="text-lg font-medium text-gray-900">Yes</span> <svg class="w-5 h-5 text-green-600 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path> </svg> </div> <p class="text-sm text-gray-600">Positive response option</p> </div> </div> <!-- No Option Preview --> <div class="flex items-center p-4 bg-red-50 border-2 border-red-200 rounded-lg"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center"> <span class="text-sm font-semibold text-red-600">2</span> </div> </div> <div class="ml-4 flex-1"> <div class="flex items-center"> <span class="text-lg font-medium text-gray-900">No</span> <svg class="w-5 h-5 text-red-600 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path> </svg> </div> <p class="text-sm text-gray-600">Negative response option</p> </div> </div> </div> <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg"> <div class="flex items-start"> <svg class="w-5 h-5 text-blue-500 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> <div class="ml-2"> <p class="text-sm text-blue-800"> <strong>Perfect!</strong> These options will be automatically created for your Yes/No poll. People will simply click their choice. </p> </div> </div> </div> <!-- Hidden inputs for Yes/No - these are required for server validation --> <!-- Note: These should be treated as regular options by the server --> <input type="hidden" name="options[]" value="Yes" class="yes-no-option" required> <input type="hidden" name="options[]" value="No" class="yes-no-option" required> </div> </div> </div> <!-- Step 4: Poll Settings --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">4</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Poll Settings</h3> <p class="text-sm text-gray-600">Configure how your poll works</p> </div> </div> </div> <div class="p-6"> <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> <!-- Anonymous Voting --> <div class="bg-gray-50 p-4 rounded-lg"> <label class="flex items-start"> <input type="checkbox" name="anonymous" value="1" class="mt-1 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" {{ old('anonymous') ? 'checked' : '' }}> <div class="ml-3"> <div class="font-medium text-gray-900">Anonymous Voting</div> <p class="text-sm text-gray-600">Responses won't be linked to specific users</p> <p class="text-xs text-gray-500 mt-1">💡 This encourages honest feedback but you won't know who voted what</p> </div> </label> </div> <!-- Show Results --> <div class="bg-gray-50 p-4 rounded-lg"> <label class="flex items-start"> <input type="checkbox" name="show_results" value="1" checked class="mt-1 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" {{ old('show_results', true) ? 'checked' : '' }}> <div class="ml-3"> <div class="font-medium text-gray-900">Show Results After Voting</div> <p class="text-sm text-gray-600">People can see results after they vote</p> <p class="text-xs text-gray-500 mt-1">📊 Recommended - increases engagement</p> </div> </label> </div> <!-- Allow Comments --> <div class="bg-gray-50 p-4 rounded-lg md:col-span-2"> <label class="flex items-start"> <input type="checkbox" name="allow_comments" value="1" class="mt-1 rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" {{ old('allow_comments') ? 'checked' : '' }}> <div class="ml-3"> <div class="font-medium text-gray-900">Allow Comments</div> <p class="text-sm text-gray-600">People can add optional comments with their votes</p> <p class="text-xs text-gray-500 mt-1">💬 Great for getting detailed feedback and suggestions</p> </div> </label> </div> </div> </div> </div> <!-- Step 5: Who Can See This Poll --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">5</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Who Can See This Poll</h3> <p class="text-sm text-gray-600">Choose who can participate in your poll</p> </div> </div> </div> <div class="p-6 space-y-4"> <!-- Everyone --> <label class="visibility-card cursor-pointer {{ old('visibility', 'public') === 'public' ? 'selected' : '' }}"> <input type="radio" name="visibility" value="public" class="sr-only" {{ old('visibility', 'public') === 'public' ? 'checked' : '' }} onchange="updateVisibilityOptions()"> <div class="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-300 transition-colors"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center"> <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> </div> </div> <div class="ml-4"> <h4 class="font-medium text-gray-900">Everyone in the Organization</h4> <p class="text-sm text-gray-600">All users can see and participate in this poll</p> <p class="text-xs text-gray-500">🌍 Best for general surveys and company-wide decisions</p> </div> </div> </div> </label> <!-- Specific Departments --> <label class="visibility-card cursor-pointer {{ old('visibility') === 'department' ? 'selected' : '' }}"> <input type="radio" name="visibility" value="department" class="sr-only" {{ old('visibility') === 'department' ? 'checked' : '' }} onchange="updateVisibilityOptions()"> <div class="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-300 transition-colors"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center"> <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path> </svg> </div> </div> <div class="ml-4"> <h4 class="font-medium text-gray-900">Specific Departments Only</h4> <p class="text-sm text-gray-600">Only people in selected departments can participate</p> <p class="text-xs text-gray-500">🏢 Perfect for department-specific topics</p> </div> </div> </div> </label> <!-- Custom Users --> <label class="visibility-card cursor-pointer {{ old('visibility') === 'custom' ? 'selected' : '' }}"> <input type="radio" name="visibility" value="custom" class="sr-only" {{ old('visibility') === 'custom' ? 'checked' : '' }} onchange="updateVisibilityOptions()"> <div class="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-300 transition-colors"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center"> <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path> </svg> </div> </div> <div class="ml-4"> <h4 class="font-medium text-gray-900">Custom User Selection</h4> <p class="text-sm text-gray-600">Choose specific people who can participate</p> <p class="text-xs text-gray-500">👥 Ideal for targeted feedback from specific groups</p> </div> </div> </div> </label> <!-- Department Selection --> <div id="departmentSelect" style="display: none;" class="mt-4 bg-blue-50 p-4 rounded-lg"> <label class="block text-sm font-medium text-gray-700 mb-3"> Select Departments <span class="text-red-500">*</span> </label> <div class="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-48 overflow-y-auto"> @foreach ($departments as $department) <label class="flex items-center p-2 hover:bg-blue-100 rounded"> <input type="checkbox" name="visible_departments[]" value="{{ $department->id }}" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" {{ in_array($department->id, old('visible_departments', [])) ? 'checked' : '' }}> <span class="ml-2 text-sm text-gray-700">{{ $department->name }}</span> </label> @endforeach </div> </div> <!-- User Selection --> <div id="userSelect" style="display: none;" class="mt-4 bg-purple-50 p-4 rounded-lg"> <label class="block text-sm font-medium text-gray-700 mb-3"> Select Users <span class="text-red-500">*</span> </label> <div class="max-h-48 overflow-y-auto"> <div class="space-y-1"> @foreach ($users as $user) <label class="flex items-center p-2 hover:bg-purple-100 rounded"> <input type="checkbox" name="visible_users[]" value="{{ $user->id }}" class="rounded border-gray-300 text-purple-600 shadow-sm focus:border-purple-300 focus:ring focus:ring-purple-200 focus:ring-opacity-50" {{ in_array($user->id, old('visible_users', [])) ? 'checked' : '' }}> <div class="ml-2"> <div class="text-sm font-medium text-gray-900">{{ $user->name }}</div> <div class="text-xs text-gray-500">{{ $user->department ? $user->department->name : 'No Department' }}</div> </div> </label> @endforeach </div> </div> </div> </div> </div> <!-- Step 6: Schedule (Optional) --> <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"> <div class="bg-gray-50 px-6 py-4 border-b border-gray-200"> <div class="flex items-center"> <div class="flex-shrink-0"> <div class="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center text-white text-sm font-semibold">6</div> </div> <div class="ml-4"> <h3 class="text-lg font-semibold text-gray-900">Schedule <span class="text-gray-400">(Optional)</span></h3> <p class="text-sm text-gray-600">Set when your poll should start and end</p> </div> </div> </div> <div class="p-6"> <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6"> <div class="flex"> <svg class="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> <div class="ml-3"> <p class="text-sm text-yellow-800"> <strong>Optional:</strong> Leave these blank if you want your poll to be available immediately and never expire. </p> </div> </div> </div> <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> <div> <label for="starts_at" class="block text-sm font-medium text-gray-700 mb-2"> 📅 Start Date & Time </label> <input type="datetime-local" name="starts_at" id="starts_at" value="{{ old('starts_at') }}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"> <p class="mt-1 text-xs text-gray-500">When should people be able to start voting?</p> @error('starts_at') <p class="text-red-500 text-sm mt-1">{{ $message }}</p> @enderror </div> <div> <label for="ends_at" class="block text-sm font-medium text-gray-700 mb-2"> 🏁 End Date & Time </label> <input type="datetime-local" name="ends_at" id="ends_at" value="{{ old('ends_at') }}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"> <p class="mt-1 text-xs text-gray-500">When should voting close?</p> @error('ends_at') <p class="text-red-500 text-sm mt-1">{{ $message }}</p> @enderror </div> </div> </div> </div> <!-- Submit Section --> <div class="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl shadow-lg text-white overflow-hidden"> <div class="p-6"> <div class="flex items-center justify-between"> <div> <h3 class="text-xl font-bold">Ready to Create Your Poll?</h3> <p class="text-blue-100 mt-1">Review your poll details and click create when ready</p> </div> <div class="flex-shrink-0"> <svg class="w-12 h-12 text-blue-200" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path> </svg> </div> </div> <div class="flex items-center space-x-4 mt-6"> <!-- Clean working submit button --> <button type="submit" onclick="document.getElementById('pollForm').submit(); return false;" style=" background: #2563eb !important; color: white !important; padding: 12px 32px !important; border-radius: 8px !important; font-weight: 600 !important; cursor: pointer !important; pointer-events: auto !important; z-index: 9999 !important; position: relative !important; border: none !important; box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important; transition: background-color 0.2s ease !important; " onmouseover="this.style.backgroundColor='#1d4ed8'" onmouseout="this.style.backgroundColor='#2563eb'"> 🚀 Create Poll </button> <a href="{{ route('polls.index') }}" class="text-blue-100 hover:text-white transition-colors font-medium"> ← Back to Polls </a> </div> </div> </div> </form> </div> <script> // Poll type configuration const pollTypeConfigs = { 'single_choice': { optionsTitle: 'Answer Options', optionsHelp: 'Add the choices people can select from. People can only pick one.', addButtonText: '+ Add Choice', placeholder: 'Enter choice option...' }, 'multiple_choice': { optionsTitle: 'Answer Options', optionsHelp: 'Add the choices people can select from. People can pick multiple options.', addButtonText: '+ Add Choice', placeholder: 'Enter choice option...' }, 'yes_no': { optionsTitle: 'Yes/No Question', optionsHelp: 'This will automatically create Yes and No options for your question.', addButtonText: null, placeholder: null }, 'rating': { optionsTitle: 'Rating Configuration', optionsHelp: 'Set up your rating scale (e.g., 1-5 stars, 1-10 points).', addButtonText: null, placeholder: null } }; // Update options section based on poll type function updatePollOptions() { const pollTypeInputs = document.querySelectorAll('input[name="type"]'); let selectedType = null; // Find the selected poll type for (let input of pollTypeInputs) { if (input.checked) { selectedType = input.value; break; } } if (!selectedType) return; const config = pollTypeConfigs[selectedType]; const choiceOptions = document.getElementById('choiceOptions'); const ratingOptions = document.getElementById('ratingOptions'); const optionsSection = document.getElementById('optionsSection'); // Update visual selection document.querySelectorAll('.poll-type-card').forEach(card => { card.classList.remove('selected'); }); const selectedCard = document.querySelector(`input[value="${selectedType}"]`).closest('.poll-type-card'); if (selectedCard) { selectedCard.classList.add('selected'); } // Show/hide appropriate sections if (selectedType === 'single_choice' || selectedType === 'multiple_choice') { if (choiceOptions) choiceOptions.style.display = 'block'; if (ratingOptions) ratingOptions.style.display = 'none'; const yesNoOptions = document.getElementById('yesNoOptions'); if (yesNoOptions) yesNoOptions.style.display = 'none'; // Update titles and help text const titleElement = choiceOptions.querySelector('h4'); const helpElement = choiceOptions.querySelector('p'); if (titleElement) titleElement.textContent = config.optionsTitle; if (helpElement) helpElement.textContent = config.optionsHelp; // Make sure we have at least 2 options const optionsList = document.getElementById('optionsList'); if (optionsList && optionsList.children.length === 0) { addOption(); addOption(); } } else if (selectedType === 'rating') { if (choiceOptions) choiceOptions.style.display = 'none'; if (ratingOptions) ratingOptions.style.display = 'block'; const yesNoOptions = document.getElementById('yesNoOptions'); if (yesNoOptions) yesNoOptions.style.display = 'none'; // Ensure a rating scale is selected by default const ratingInputs = document.querySelectorAll('input[name="max_rating"]'); let hasSelected = false; ratingInputs.forEach(input => { if (input.checked) hasSelected = true; }); // If no rating selected, select the 5-star option by default if (!hasSelected && ratingInputs.length > 0) { ratingInputs[0].checked = true; // Select first option (1-5 scale) updateRatingSelection(); } } else if (selectedType === 'yes_no') { if (choiceOptions) choiceOptions.style.display = 'none'; if (ratingOptions) ratingOptions.style.display = 'none'; const yesNoOptions = document.getElementById('yesNoOptions'); if (yesNoOptions) yesNoOptions.style.display = 'block'; // Ensure Yes/No hidden inputs exist ensureYesNoInputs(); } } // Add option function function addOption() { const optionsList = document.getElementById('optionsList'); if (!optionsList) return; const optionCount = optionsList.children.length + 1; const optionDiv = document.createElement('div'); optionDiv.className = 'option-input bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-200'; optionDiv.innerHTML = ` <div class="flex items-center"> <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3"> <span class="text-sm font-medium text-blue-600">${optionCount}</span> </div> <input type="text" name="options[]" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter option ${optionCount}" required> <button type="button" onclick="removeOption(this)" class="ml-3 p-2 text-red-500 hover:bg-red-50 rounded-lg transition-colors"> <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path> </svg> </button> </div> `; optionsList.appendChild(optionDiv); updateOptionNumbers(); } // Remove option function function removeOption(button) { const optionsList = document.getElementById('optionsList'); if (!optionsList || optionsList.children.length <= 2) return; button.closest('.option-input').remove(); updateOptionNumbers(); } // Update option numbers function updateOptionNumbers() { const optionsList = document.getElementById('optionsList'); if (!optionsList) return; Array.from(optionsList.children).forEach((child, index) => { const numberSpan = child.querySelector('.text-blue-600'); if (numberSpan) { numberSpan.textContent = index + 1; } const input = child.querySelector('input[name="options[]"]'); if (input) { input.placeholder = `Enter option ${index + 1}`; } }); } // Ensure Yes/No inputs exist function ensureYesNoInputs() { const yesNoOptions = document.getElementById('yesNoOptions'); if (!yesNoOptions) return; // Check if hidden inputs already exist let yesInput = yesNoOptions.querySelector('input[value="Yes"]'); let noInput = yesNoOptions.querySelector('input[value="No"]'); if (!yesInput) { yesInput = document.createElement('input'); yesInput.type = 'hidden'; yesInput.name = 'options[]'; yesInput.value = 'Yes'; yesInput.className = 'yes-no-option'; yesNoOptions.appendChild(yesInput); } if (!noInput) { noInput = document.createElement('input'); noInput.type = 'hidden'; noInput.name = 'options[]'; noInput.value = 'No'; noInput.className = 'yes-no-option'; yesNoOptions.appendChild(noInput); } } // Update rating scale selection function updateRatingSelection() { document.querySelectorAll('.rating-scale-card').forEach(card => { card.classList.remove('selected'); }); const selectedRating = document.querySelector('input[name="max_rating"]:checked'); if (selectedRating) { const selectedCard = selectedRating.closest('.rating-scale-card'); if (selectedCard) { selectedCard.classList.add('selected'); } } } // Update visibility options function updateVisibilityOptions() { const visibility = document.querySelector('input[name="visibility"]:checked'); if (!visibility) return; const visibilityValue = visibility.value; // Hide all option containers const departmentSelect = document.getElementById('departmentSelect'); const userSelect = document.getElementById('userSelect'); if (departmentSelect) departmentSelect.style.display = 'none'; if (userSelect) userSelect.style.display = 'none'; // Show relevant container if (visibilityValue === 'department' && departmentSelect) { departmentSelect.style.display = 'block'; } else if (visibilityValue === 'custom' && userSelect) { userSelect.style.display = 'block'; } // Update visual selection document.querySelectorAll('.visibility-card').forEach(card => { card.classList.remove('selected'); }); const selectedCard = visibility.closest('.visibility-card'); if (selectedCard) { selectedCard.classList.add('selected'); } } // Form validation function validateForm() { console.log('Validating form...'); // Debug log const pollType = document.querySelector('input[name="type"]:checked'); if (!pollType) { alert('Please select a poll type'); return false; } const title = document.querySelector('input[name="title"]'); if (!title || !title.value.trim()) { alert('Please enter a poll title'); return false; } // Validate options based on poll type if (['single_choice', 'multiple_choice'].includes(pollType.value)) { const options = Array.from(document.querySelectorAll('input[name="options[]"]:not([type="hidden"])')) .map(input => input.value.trim()) .filter(value => value); if (options.length < 2) { alert('Please add at least 2 options for your poll'); return false; } } console.log('Form validation passed!'); // Debug log return true; } // Initialize on page load document.addEventListener('DOMContentLoaded', function() { // Add event listeners to poll type radio buttons document.querySelectorAll('input[name="type"]').forEach(input => { input.addEventListener('change', updatePollOptions); }); // Add event listeners to visibility radio buttons document.querySelectorAll('input[name="visibility"]').forEach(input => { input.addEventListener('change', updateVisibilityOptions); }); // Add event listeners to rating scale buttons document.querySelectorAll('input[name="max_rating"]').forEach(input => { input.addEventListener('change', updateRatingSelection); }); // Initialize the form updatePollOptions(); updateVisibilityOptions(); updateRatingSelection(); // Add form validation - simplified version const form = document.querySelector('form'); if (form) { console.log('Form found'); // Remove any existing event listeners that might block form.onsubmit = null; // Add very basic validation only form.addEventListener('submit', function(e) { console.log('Form attempting to submit...'); const title = document.querySelector('input[name="title"]'); if (!title || !title.value.trim()) { alert('Please enter a poll title'); e.preventDefault(); return false; } const pollType = document.querySelector('input[name="type"]:checked'); if (!pollType) { alert('Please select a poll type'); e.preventDefault(); return false; } console.log('Validation passed - submitting form'); return true; }); } }); // Add CSS for visual feedback const style = document.createElement('style'); style.textContent = ` .poll-type-card.selected { border-color: #3B82F6 !important; background-color: #EFF6FF !important; } .poll-type-card.selected .border-2 { border-color: #3B82F6 !important; } .visibility-card.selected { border-color: #3B82F6 !important; background-color: #EFF6FF !important; } .visibility-card.selected .border-2 { border-color: #3B82F6 !important; } .rating-scale-card.selected { border-color: #3B82F6 !important; background-color: #EFF6FF !important; } .rating-scale-card.selected .border-2 { border-color: #3B82F6 !important; } .option-input:hover { border-color: #3B82F6 !important; } .poll-type-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); } .visibility-card:hover { transform: translateY(-1px); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); } .rating-scale-card:hover { transform: translateY(-1px); box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); } /* Ensure submit button is clickable */ #createPollBtn { pointer-events: auto !important; cursor: pointer !important; z-index: 1000 !important; position: relative !important; } #createPollBtn:hover { background-color: #F3F4F6 !important; transform: translateY(-1px); box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important; } `; document.head.appendChild(style); </script> @endsection 
